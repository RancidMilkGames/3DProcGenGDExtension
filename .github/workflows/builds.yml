name: Builds

on: [push, pull_request]

env:
  LIBNAME: libgdproc

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-macos
  cancel-in-progress: true

jobs:
  build:
    runs-on:  ${{matrix.os}}
    name: ${{matrix.name}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - identifier: windows
            os: windows-latest
            name: üèÅ Windows
            target: template
            platform: windows
            arch: x86_64
            cache-name: windows-x86_64-mingw

          - identifier: macos
            os: macos-latest
            name: üçé macOS (universal)
            target: template
            platform: macos
            arch: universal
            cache-name: macos-universal

          - identifier: linux
            os: ubuntu-latest
            name: üêß Linux
            runner: ubuntu-20.04
            target: template
            platform: linux
            arch: x86_64
            cache-name: linux-x86_64

    permissions:
      contents: write

    env:
      SCONS_CACHE: ${{ github.workspace }}/.scons-cache/

    steps:

      - name: Checkout project
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set up SCons
        shell: bash
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          scons --version
      - name: Linux dependencies
        if: ${{ matrix.platform == 'linux' }}
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qqq build-essential pkg-config
      - name: Setup MinGW for Windows/MinGW build
        if: ${{ matrix.platform == 'windows' }}
        uses: egor-tensin/setup-mingw@v2

      - name: Compile godot-cpp
        shell: sh
        run: |
          scons
        working-directory: godot-cpp

      - name: CompileExtension
        id: CompileExtension
        shell: sh
        run: |
          scons target='template_release' platform='${{ matrix.platform }}' arch='${{ matrix.arch }}'
          scons target='template_debug' platform='${{ matrix.platform }}' arch='${{ matrix.arch }}'
      - name: Delete compilation files
        if: ${{ matrix.platform == 'windows' }}
        run: |
          Remove-Item project/addons/proc/* -Include *.exp,*.lib,*.pdb -Force
      - name: UploadArtifact
        id: UploadArtifact
        uses: actions/upload-artifact@v3
        with:
          name: "${{ github.event.repository.name }}-addon"
          path: 'project/addons/proc'

      - name: ArchiveRelease
        id: ArchiveRelease
        if: steps.CompileExtension.outcome == 'success' || steps.CompileExtension.conclusion == 'success'
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: 'addons.zip'
          path: 'project/addons/proc'

      - name: Create and upload asset
        uses: ncipollo/release-action@v1
        with:
          # name: ${{ github.ref_name }}
          tag: ${{ github.ref }}
          allowUpdates: true
          # artifacts: "${{ env.LIBNAME }}.${{ matrix.platform }}.${{ matrix.target }}.${{ matrix.arch }}.zip"
          artifacts: 'project/addons/*'
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}
        if: steps.ArchiveRelease.outcome == 'success'  || steps.ArchiveRelease.conclusion == 'success'